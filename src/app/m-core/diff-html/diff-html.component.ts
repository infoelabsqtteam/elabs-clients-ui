import { Component, OnInit,OnDestroy } from '@angular/core';
import * as Diff2Html from 'diff2html';
import * as Diff from 'diff';
import { FormBuilder, FormGroup, FormControl, FormArray, Validators,FormGroupDirective } from '@angular/forms';
import { CommonFunctionService } from '../../services/common-utils/common-function.service';
import { ApiService } from '../../services/api/api.service';
import { DataShareService } from '../../services/data-share/data-share.service';

@Component({
  selector: 'app-diff-html',
  templateUrl: './diff-html.component.html',
  styleUrls: ['./diff-html.component.css']
})
export class DiffHtmlComponent implements OnInit,OnDestroy {

  compareForm: FormGroup;

  outputHtml: string='';
  staticData:any={};
  copyStaticData:any={};
  currentMenu:any={};
  elements:any=[];
  staticDataSubscriber;
  gridDataSubscription;


  constructor(
    private commonFunctionService:CommonFunctionService,
    private apiService:ApiService,
    private dataShareService:DataShareService
  ) {
    this.staticDataSubscriber = this.dataShareService.staticData.subscribe(data =>{
      this.setStaticData(data);
    })
    this.gridDataSubscription = this.dataShareService.gridData.subscribe(data =>{
      this.setGridData(data);
    })
    // this.init();
    this.initform();
    const payloadList = [
      {
        "api_params" : 'external_system_connections',
        "call_back_field" : 'account_list_for_api',
        "criteria":[],
        'object' : {}
      }
    ]
    this.getCall(payloadList);
    this.currentMenu['name']="compare_master";
    const pagePayload = this.commonFunctionService.getPage(1,[],this.currentMenu,[],{},'');
    this.apiService.getGridData(pagePayload);

   }
  initform(){
    this.compareForm = new FormGroup({
      compare_dinamically : new FormControl(''),
      server1: new FormControl('https://serverqualiteklab.e-labs.ai',Validators.required),
      server2: new FormControl('https://serverqualiteklab.qualiteklab.com',Validators.required),
      api1: new FormControl('/rest/mig/send_menu_by_module/TMGMT',Validators.required),
      api2: new FormControl('/rest/mig/send_menu_by_module/TMGMT',Validators.required),
      account: new FormControl('',Validators.required),
      account2: new FormControl('',Validators.required)
    });
  }
  ngOnDestroy() {    
    if(this.staticDataSubscriber){
      this.staticDataSubscriber.unsubscribe();
    }
    if(this.gridDataSubscription){
      this.gridDataSubscription.unsubscribe();
    }
  }

  ngOnInit(): void {
    // this.store.select('staticData').subscribe((state=>{
    //   if (state.staticData) {
    //     this.staticData = state.staticData; 
    //     Object.keys(this.staticData).forEach(key => {        
    //       this.copyStaticData[key] = JSON.parse(JSON.stringify(this.staticData[key]));
    //     })
    //     if(this.copyStaticData['old_data'] && this.copyStaticData['new_data']){
    //       this.outputHtml = this.getCompareData(this.copyStaticData['old_data'], this.copyStaticData['new_data'])
    //     }
    //   }
    // }))
    // this.store.select('gridData').subscribe((state => {
    //   if (state.gridData) {
    //     if (state.gridData.data && state.gridData.data.length > 0) {
    //       this.elements = JSON.parse(JSON.stringify(state.gridData.data));
    //     } else {
    //       this.elements = [];
    //     }
    //   }
    // }))
  }
  init() {
    let strInput =
      '--- a/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n+++ b/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n@@ -1035,6 +1035,17 @@ func Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Pselect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t) (n int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_PSELECT6, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func read(fd int, p []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(p) > 0 {\n';
    const oldText = {
        "name":"Suraj Kumar",
        "list":[
          {
            "name":"suraj"
          },
          {
            "email":"suraj@gmail.com"
          }
        ]
      };
    const newText = {
      "name":"Suraj Kumar",
      "list":[
        {
          "name":"suraj",
          "email":"suraj@gmail.com"
        },
        {
          "email":"suraj@gmail.com"
        },
        {
          "mobile":"2541256325"
        }
      ]
    }  
    // const diff = Diff.createTwoFilesPatch("file", "file", JSON.stringify(oldText), JSON.stringify(newText),'Old file','New file');
    const oldObj ={"name":"Suraj Kumar","list":[{ "name":"Test"},{"email":"test@gmail.com"}]
    }
    const newObj ={
      "name":"Suraj Kumar",
      "list":[
        {
          "name":"suraj"
        },
        {
          "email":"suraj@gmail.com"
        }
      ]
    }
    
    
    // const diff1 = Diff.diffJson(oldObj, newObj, {newlineIsToken: true})
    // console.log(diff1);
    
    // let outputHtml1 = Diff2Html.html(diff, { drawFileList: true, matching: 'lines' ,outputFormat: 'side-by-side'});
    
    this.outputHtml = this.getCompareData(oldText,newText);
  }
  matching:String="lines";
  outputFormat:String="side-by-side";
  context:Number = 200;
  compare_by_key:String = '';
  OnChangeFunc(){
    let oldText = this.copyStaticData['old_data'] 
    let newText = this.copyStaticData['new_data'] 
    if(this.compare_by_key != ''){
      const key = this.compare_by_key;
      Object.keys(oldText).forEach(key =>{
        if(key == this.compare_by_key){
          oldText = oldText[key];
        }
      })
      Object.keys(newText).forEach(key =>{
        if(key == this.compare_by_key){
          newText = newText[key];
        }
      })
    }
    this.outputHtml = this.getCompareData(oldText,newText);
  }
  setGridData(gridData){
    if (gridData) {
      if (gridData.data && gridData.data.length > 0) {
        this.elements = JSON.parse(JSON.stringify(gridData.data));
      } else {
        this.elements = [];
      }
    }
  }
  setStaticData(staticData){
    if (staticData) {
      this.staticData = staticData; 
      Object.keys(this.staticData).forEach(key => {        
        this.copyStaticData[key] = JSON.parse(JSON.stringify(this.staticData[key]));
      })
      if(this.copyStaticData['old_data'] && this.copyStaticData['new_data']){
        this.outputHtml = this.getCompareData(this.copyStaticData['old_data'], this.copyStaticData['new_data'])
      }
    }
  }

  getCompareData(oldText,newText){    
    const diffConfig:Object = {context: this.context}
    const diff = Diff.createTwoFilesPatch("file", "file", JSON.stringify(oldText, null, 1), JSON.stringify(newText, null, 1),'New file','New file', diffConfig);
    const config:object={
      drawFileList: true,
      matching: this.matching,
      outputFormat: this.outputFormat, 
      renderNothingWhenEmpty: false,
      maxLineLengthHighlight:100000
    }
    let outputHtml = Diff2Html.html(diff, config);
    return outputHtml;
  }

  getData(){
    
      const objectValue = this.compareForm.getRawValue();
      let object = {
        "call_1":{
          "host":objectValue.server1,
          "end_point":objectValue.api1,
          "account":objectValue.account,
          "call_back":"old_data"
        },
        "call_2":{
          "host":objectValue.server2,
          "end_point":objectValue.api2,
          "account":objectValue.account2,
          "call_back":"new_data"
        }
      }
      const payloadList = [
        {
          "api_params" : 'QTMP:GET_COMPARE_OLD_AND_NEW_DATA',
          "call_back_field" : '',
          "criteria":[],
          'object' : object
        }
      ]
      this.getCall(payloadList);   

  }
  getCall(payloadList){
    const stati_group = [];
    payloadList.forEach(element => {
      const getCompanyPayload = this.commonFunctionService.getPaylodWithCriteria(element.api_params,element.call_back_field,element.criteria,element.object)            
      stati_group.push(getCompanyPayload);
    });
    if(stati_group.length > 0){
      // this.store.dispatch(
      //   new CusTemGenAction.GetStaticData(stati_group)
      // )    
      this.apiService.getStatiData(stati_group);    
    }
  }
  compareObjects(o1: any, o2: any): boolean {
    return o1._id === o2._id;
  }
  OnCompareToMaster(){
    let object = this.compareForm.getRawValue()['compare_dinamically'];
    if(object && object._id != ""){
      this.compareForm.get('server1').setValue(object['host']);
      this.compareForm.get('server2').setValue(object['host_1']);
      this.compareForm.get('api1').setValue(object['end_point']);
      this.compareForm.get('api2').setValue(object['end_point_2']);
      this.compareForm.get('account').setValue(object['account']);
      this.compareForm.get('account2').setValue(object['account']);
      this.getData();
    }else{
      this.compareForm.reset();
      this.outputHtml = '';
    }
  }


  // https://stackoverflow.com/questions/54826435/create-unified-diff-text-for-diff2html-in-browser?
}
